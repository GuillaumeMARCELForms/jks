<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.32">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.7"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.7">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options>
        <string>parallelsAlwaysFailFast</string>
      </options>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.5.11">
      <gitLabConnection></gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.65">
    <script>pipeline
{
    agent any
    tools {
        maven &quot;maven 3.6&quot;
    }
    options {
        parallelsAlwaysFailFast()
    }
    
    stages {
        stage(&apos;Non-Parallel Stage&apos;) {
            steps {
                echo &apos;This stage will be executed first.&apos;
            }
        }
       stage(&apos;Parallel Stage&apos;) {
            parallel {
                   stage(&apos;Checkstyle&apos;) {
                        steps{
                            checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &apos;https://github.com/plb-formation/spring-framework-petclinic.git&apos;]]])
                            // Run the maven build with checkstyle
                            sh &quot;mvn clean package checkstyle:checkstyle&quot;
                         }
                     }
                    stage(&apos;Sonarqube&apos;) {
                        steps {
                            checkout([$class: &apos;GitSCM&apos;, branches: [[name: &apos;*/master&apos;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &apos;https://github.com/plb-formation/spring-framework-petclinic.git&apos;]]])
                            withSonarQubeEnv(&apos;SonarQube&apos;) {
                            sh &quot;mvn  clean package sonar:sonar -Dsonar.host_url=$SONAR_HOST_URL &quot;
                            }
                         }
                    }
            }
        }  
    }
    
    
    
    
    
    
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>